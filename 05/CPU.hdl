// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // DECODE INSTRUCTIONS
    //The leftmost bit is the C-instruction code. The next two bits are not used (ignore instruction 13,14)

    //Instruction[0] = jGT          j3
    //Instruction[1] = jEQ          j2
    //Instruction[2] = jLT          j1
    //Instruction[3] = store -> M   d3
    //Instruction[4] = store -> D   d2
    //Instruction[5] = store -> A   d1
    //Instruction[6] = no           c6
    //Instruction[7] = f            c5
    //Instruction[8] = ny           c4 
    //Instruction[9] = zy           c3
    //Instruction[10] = nx          c2
    //Instruction[11] = zx          c1
    //Instruction[12] = al
    //Instruction[15] = c bit

    Or16(a=instruction, b=false, out[0]=j3, out[1]=j2, out[2]=j1, out[3]=d3, out[4]=d2, out[5]=d1, out[6]=c6, out[7]=c5, out[8]=c4, out[9]=c3, out[10]=c2, out[11]=c1, out[12]=al, out[15]=cbit);

    Not(in=cbit, out=notC);
    //WRITE to M
    And(a=cbit, b=d2, out=writeD);
    And(a=cbit, b=d3, out=writeM);

    //WRITE to A
    Mux16(a=alu, b=instruction, sel=notC, out=o1);
    Or(a=notC, b=d1, out=loadA);
    ARegister(in=o1, load=loadA, out=areg, out[0..14]=addressM);

    //WRITE to D
    DRegister(in=alu, load=writeD, out=dreg);

    //ALU
    Mux16(a=areg, b=inM, sel=al, out=am);
    ALU(x=dreg, y=am, zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6, out=alu, out=outM, zr=zr, ng=ng);
    //this goes back up kinda recursive

    //PC
    And(a=j1, b=ng, out=jLT);
    And(a=j2, b=zr, out=jEQ);

    Or(a=ng, b=zr, out=something);
    Not(in=something, out=pos);
    And(a=j3, b=pos, out=jGT);

    Or(a=jGT, b=jEQ, out=jump1);
    Or(a=jump1, b=jLT, out=jumpbit);

    And(a=cbit, b=jumpbit, out=jump);
    PC(in=areg, load=jump, inc=true, reset=reset, out[0..14]=pc);

}