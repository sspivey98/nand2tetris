// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static int bits;

    /** Initializes the library. */
    function void init() {  
        var int i;
        let bits = Array.new(16);
        let bits[0] = 1;

        let i = 1;
        while (i < 16) {
            let bits[i] = bits[i-1] + bits[i-1];
            let i = i + 1;
        }

        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        }
        else {
            return x;
        }
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, i, mask;

        let sum = 0;
        let shiftedX = x;
        let i = 0;
        let mask = 1;

        while (i < 16) {
            if ((mask & y) = mask) { // Checking i-th bit.
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX; 
            let i = i + 1;
            let mask = mask + mask;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int yy, q, r;
        var bool neg;

        let neg = ((x < 0) & (y > 0)) | ((x > 0) & (y < 0));

        let x = Math.abs(x);
        let y = Math.abs(y);

        if (y > x) {
            return 0;
        }

        let yy = y + y;
        
        if (yy < 0) { // overflow
             return 0; 
        } 

        let q = Math.divide(x, yy);

        if ((x - (q * yy)) < y) {
            let r = q + q;
        } 
        else {
            let r = q + q + 1;
        }

        if (neg) { 
            let r = -r; 
        }

        return r;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int i, y, y2i, y2i2;

        let y = 0;
        let i = Math.min(14, (x / 2) - 1); // y + bits[15] always overflows
        while (i > -1) {
            let y2i = y + bits[i];
            let y2i2 = y2i * y2i;

            if (y2i2 > 0) { // overflow handling
                if (y2i2 = x) {
                     return y2i; 
                }
                if (y2i2 < x) { 
                    let y = y2i; 
                }
            }

            let i = i - 1;
        }

        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        }
        else {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        }
        else {
            return b;
        }
    }
    function int bits(int i) {
        return bits[i];
    }
}
