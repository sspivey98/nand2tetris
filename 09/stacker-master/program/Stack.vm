function Stack.new 1
push constant 1
call Memory.alloc 1
pop pointer 0
call Constants.LEVELS 0
call Array.new 1
pop this 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
call Constants.LEVELS 0
lt
not
if-goto WHILE_END0
push local 0
push this 0
add
call Constants.COLS 0
call Array.new 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push pointer 0
return
function Stack.add 4
push argument 0
pop pointer 0
push argument 2
push constant 1
sub
push this 0
add
pop pointer 1
push that 0
pop local 2
push argument 2
push this 0
add
pop pointer 1
push that 0
pop local 3
push constant 0
pop local 1
push constant 0
pop local 0
push argument 2
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
push this 0
add
pop pointer 1
push that 0
pop local 3
label WHILE_EXP0
push local 1
call Constants.COLS 0
lt
not
if-goto WHILE_END0
push local 1
push local 3
add
push local 1
push argument 1
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP0
label WHILE_END0
push constant 3
pop local 0
goto IF_END0
label IF_FALSE0
label WHILE_EXP1
push local 1
call Constants.COLS 0
lt
not
if-goto WHILE_END1
push local 1
push local 3
add
push local 1
push local 2
add
pop pointer 1
push that 0
push local 1
push argument 1
add
pop pointer 1
push that 0
and
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 1
push local 3
add
pop pointer 1
push that 0
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 0
push constant 1
add
pop local 0
label IF_FALSE1
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP1
label WHILE_END1
label IF_END0
push local 0
return
function Stack.getRow 0
push argument 0
pop pointer 0
push argument 1
push this 0
add
pop pointer 1
push that 0
return
function Stack.dispose 0
push argument 0
pop pointer 0
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return
